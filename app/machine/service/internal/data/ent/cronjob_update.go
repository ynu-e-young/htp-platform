// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/biz"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/cronjob"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/predicate"
)

// CronJobUpdate is the builder for updating CronJob entities.
type CronJobUpdate struct {
	config
	hooks     []Hook
	mutation  *CronJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CronJobUpdate builder.
func (cju *CronJobUpdate) Where(ps ...predicate.CronJob) *CronJobUpdate {
	cju.mutation.Where(ps...)
	return cju
}

// SetMachineID sets the "machine_id" field.
func (cju *CronJobUpdate) SetMachineID(u uuid.UUID) *CronJobUpdate {
	cju.mutation.SetMachineID(u)
	return cju
}

// SetCheckName sets the "check_name" field.
func (cju *CronJobUpdate) SetCheckName(s string) *CronJobUpdate {
	cju.mutation.SetCheckName(s)
	return cju
}

// SetCronString sets the "cron_string" field.
func (cju *CronJobUpdate) SetCronString(s string) *CronJobUpdate {
	cju.mutation.SetCronString(s)
	return cju
}

// SetCoordinates sets the "coordinates" field.
func (cju *CronJobUpdate) SetCoordinates(bc []*biz.CheckCoordinate) *CronJobUpdate {
	cju.mutation.SetCoordinates(bc)
	return cju
}

// AppendCoordinates appends bc to the "coordinates" field.
func (cju *CronJobUpdate) AppendCoordinates(bc []*biz.CheckCoordinate) *CronJobUpdate {
	cju.mutation.AppendCoordinates(bc)
	return cju
}

// ClearCoordinates clears the value of the "coordinates" field.
func (cju *CronJobUpdate) ClearCoordinates() *CronJobUpdate {
	cju.mutation.ClearCoordinates()
	return cju
}

// SetCreatedAt sets the "created_at" field.
func (cju *CronJobUpdate) SetCreatedAt(t time.Time) *CronJobUpdate {
	cju.mutation.SetCreatedAt(t)
	return cju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cju *CronJobUpdate) SetNillableCreatedAt(t *time.Time) *CronJobUpdate {
	if t != nil {
		cju.SetCreatedAt(*t)
	}
	return cju
}

// SetUpdatedAt sets the "updated_at" field.
func (cju *CronJobUpdate) SetUpdatedAt(t time.Time) *CronJobUpdate {
	cju.mutation.SetUpdatedAt(t)
	return cju
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cju *CronJobUpdate) SetNillableUpdatedAt(t *time.Time) *CronJobUpdate {
	if t != nil {
		cju.SetUpdatedAt(*t)
	}
	return cju
}

// Mutation returns the CronJobMutation object of the builder.
func (cju *CronJobUpdate) Mutation() *CronJobMutation {
	return cju.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cju *CronJobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CronJobMutation](ctx, cju.sqlSave, cju.mutation, cju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cju *CronJobUpdate) SaveX(ctx context.Context) int {
	affected, err := cju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cju *CronJobUpdate) Exec(ctx context.Context) error {
	_, err := cju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cju *CronJobUpdate) ExecX(ctx context.Context) {
	if err := cju.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cju *CronJobUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CronJobUpdate {
	cju.modifiers = append(cju.modifiers, modifiers...)
	return cju
}

func (cju *CronJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cronjob.Table, cronjob.Columns, sqlgraph.NewFieldSpec(cronjob.FieldID, field.TypeInt64))
	if ps := cju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cju.mutation.MachineID(); ok {
		_spec.SetField(cronjob.FieldMachineID, field.TypeUUID, value)
	}
	if value, ok := cju.mutation.CheckName(); ok {
		_spec.SetField(cronjob.FieldCheckName, field.TypeString, value)
	}
	if value, ok := cju.mutation.CronString(); ok {
		_spec.SetField(cronjob.FieldCronString, field.TypeString, value)
	}
	if value, ok := cju.mutation.Coordinates(); ok {
		_spec.SetField(cronjob.FieldCoordinates, field.TypeJSON, value)
	}
	if value, ok := cju.mutation.AppendedCoordinates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cronjob.FieldCoordinates, value)
		})
	}
	if cju.mutation.CoordinatesCleared() {
		_spec.ClearField(cronjob.FieldCoordinates, field.TypeJSON)
	}
	if value, ok := cju.mutation.CreatedAt(); ok {
		_spec.SetField(cronjob.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cju.mutation.UpdatedAt(); ok {
		_spec.SetField(cronjob.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(cju.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cronjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cju.mutation.done = true
	return n, nil
}

// CronJobUpdateOne is the builder for updating a single CronJob entity.
type CronJobUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CronJobMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetMachineID sets the "machine_id" field.
func (cjuo *CronJobUpdateOne) SetMachineID(u uuid.UUID) *CronJobUpdateOne {
	cjuo.mutation.SetMachineID(u)
	return cjuo
}

// SetCheckName sets the "check_name" field.
func (cjuo *CronJobUpdateOne) SetCheckName(s string) *CronJobUpdateOne {
	cjuo.mutation.SetCheckName(s)
	return cjuo
}

// SetCronString sets the "cron_string" field.
func (cjuo *CronJobUpdateOne) SetCronString(s string) *CronJobUpdateOne {
	cjuo.mutation.SetCronString(s)
	return cjuo
}

// SetCoordinates sets the "coordinates" field.
func (cjuo *CronJobUpdateOne) SetCoordinates(bc []*biz.CheckCoordinate) *CronJobUpdateOne {
	cjuo.mutation.SetCoordinates(bc)
	return cjuo
}

// AppendCoordinates appends bc to the "coordinates" field.
func (cjuo *CronJobUpdateOne) AppendCoordinates(bc []*biz.CheckCoordinate) *CronJobUpdateOne {
	cjuo.mutation.AppendCoordinates(bc)
	return cjuo
}

// ClearCoordinates clears the value of the "coordinates" field.
func (cjuo *CronJobUpdateOne) ClearCoordinates() *CronJobUpdateOne {
	cjuo.mutation.ClearCoordinates()
	return cjuo
}

// SetCreatedAt sets the "created_at" field.
func (cjuo *CronJobUpdateOne) SetCreatedAt(t time.Time) *CronJobUpdateOne {
	cjuo.mutation.SetCreatedAt(t)
	return cjuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cjuo *CronJobUpdateOne) SetNillableCreatedAt(t *time.Time) *CronJobUpdateOne {
	if t != nil {
		cjuo.SetCreatedAt(*t)
	}
	return cjuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cjuo *CronJobUpdateOne) SetUpdatedAt(t time.Time) *CronJobUpdateOne {
	cjuo.mutation.SetUpdatedAt(t)
	return cjuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cjuo *CronJobUpdateOne) SetNillableUpdatedAt(t *time.Time) *CronJobUpdateOne {
	if t != nil {
		cjuo.SetUpdatedAt(*t)
	}
	return cjuo
}

// Mutation returns the CronJobMutation object of the builder.
func (cjuo *CronJobUpdateOne) Mutation() *CronJobMutation {
	return cjuo.mutation
}

// Where appends a list predicates to the CronJobUpdate builder.
func (cjuo *CronJobUpdateOne) Where(ps ...predicate.CronJob) *CronJobUpdateOne {
	cjuo.mutation.Where(ps...)
	return cjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cjuo *CronJobUpdateOne) Select(field string, fields ...string) *CronJobUpdateOne {
	cjuo.fields = append([]string{field}, fields...)
	return cjuo
}

// Save executes the query and returns the updated CronJob entity.
func (cjuo *CronJobUpdateOne) Save(ctx context.Context) (*CronJob, error) {
	return withHooks[*CronJob, CronJobMutation](ctx, cjuo.sqlSave, cjuo.mutation, cjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cjuo *CronJobUpdateOne) SaveX(ctx context.Context) *CronJob {
	node, err := cjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cjuo *CronJobUpdateOne) Exec(ctx context.Context) error {
	_, err := cjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjuo *CronJobUpdateOne) ExecX(ctx context.Context) {
	if err := cjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cjuo *CronJobUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CronJobUpdateOne {
	cjuo.modifiers = append(cjuo.modifiers, modifiers...)
	return cjuo
}

func (cjuo *CronJobUpdateOne) sqlSave(ctx context.Context) (_node *CronJob, err error) {
	_spec := sqlgraph.NewUpdateSpec(cronjob.Table, cronjob.Columns, sqlgraph.NewFieldSpec(cronjob.FieldID, field.TypeInt64))
	id, ok := cjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CronJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cronjob.FieldID)
		for _, f := range fields {
			if !cronjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cronjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjuo.mutation.MachineID(); ok {
		_spec.SetField(cronjob.FieldMachineID, field.TypeUUID, value)
	}
	if value, ok := cjuo.mutation.CheckName(); ok {
		_spec.SetField(cronjob.FieldCheckName, field.TypeString, value)
	}
	if value, ok := cjuo.mutation.CronString(); ok {
		_spec.SetField(cronjob.FieldCronString, field.TypeString, value)
	}
	if value, ok := cjuo.mutation.Coordinates(); ok {
		_spec.SetField(cronjob.FieldCoordinates, field.TypeJSON, value)
	}
	if value, ok := cjuo.mutation.AppendedCoordinates(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, cronjob.FieldCoordinates, value)
		})
	}
	if cjuo.mutation.CoordinatesCleared() {
		_spec.ClearField(cronjob.FieldCoordinates, field.TypeJSON)
	}
	if value, ok := cjuo.mutation.CreatedAt(); ok {
		_spec.SetField(cronjob.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cjuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cronjob.FieldUpdatedAt, field.TypeTime, value)
	}
	_spec.AddModifiers(cjuo.modifiers...)
	_node = &CronJob{config: cjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cronjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cjuo.mutation.done = true
	return _node, nil
}
