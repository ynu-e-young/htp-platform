// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/capturelog"
)

// CaptureLog is the model entity for the CaptureLog schema.
type CaptureLog struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// MachineID holds the value of the "machine_id" field.
	MachineID uuid.UUID `json:"machine_id,omitempty"`
	// Pixels holds the value of the "pixels" field.
	Pixels int64 `json:"pixels,omitempty"`
	// Area holds the value of the "area" field.
	Area float64 `json:"area,omitempty"`
	// SrcName holds the value of the "src_name" field.
	SrcName string `json:"src_name,omitempty"`
	// ProcName holds the value of the "proc_name" field.
	ProcName string `json:"proc_name,omitempty"`
	// SrcOssURL holds the value of the "src_oss_url" field.
	SrcOssURL string `json:"src_oss_url,omitempty"`
	// ProcOssURL holds the value of the "proc_oss_url" field.
	ProcOssURL string `json:"proc_oss_url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CaptureLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case capturelog.FieldArea:
			values[i] = new(sql.NullFloat64)
		case capturelog.FieldID, capturelog.FieldPixels:
			values[i] = new(sql.NullInt64)
		case capturelog.FieldSrcName, capturelog.FieldProcName, capturelog.FieldSrcOssURL, capturelog.FieldProcOssURL:
			values[i] = new(sql.NullString)
		case capturelog.FieldCreatedAt, capturelog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case capturelog.FieldMachineID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CaptureLog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CaptureLog fields.
func (cl *CaptureLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case capturelog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int64(value.Int64)
		case capturelog.FieldMachineID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field machine_id", values[i])
			} else if value != nil {
				cl.MachineID = *value
			}
		case capturelog.FieldPixels:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field pixels", values[i])
			} else if value.Valid {
				cl.Pixels = value.Int64
			}
		case capturelog.FieldArea:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				cl.Area = value.Float64
			}
		case capturelog.FieldSrcName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src_name", values[i])
			} else if value.Valid {
				cl.SrcName = value.String
			}
		case capturelog.FieldProcName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proc_name", values[i])
			} else if value.Valid {
				cl.ProcName = value.String
			}
		case capturelog.FieldSrcOssURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field src_oss_url", values[i])
			} else if value.Valid {
				cl.SrcOssURL = value.String
			}
		case capturelog.FieldProcOssURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field proc_oss_url", values[i])
			} else if value.Valid {
				cl.ProcOssURL = value.String
			}
		case capturelog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cl.CreatedAt = value.Time
			}
		case capturelog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cl.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CaptureLog.
// Note that you need to call CaptureLog.Unwrap() before calling this method if this CaptureLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *CaptureLog) Update() *CaptureLogUpdateOne {
	return NewCaptureLogClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the CaptureLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *CaptureLog) Unwrap() *CaptureLog {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CaptureLog is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *CaptureLog) String() string {
	var builder strings.Builder
	builder.WriteString("CaptureLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("machine_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.MachineID))
	builder.WriteString(", ")
	builder.WriteString("pixels=")
	builder.WriteString(fmt.Sprintf("%v", cl.Pixels))
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(fmt.Sprintf("%v", cl.Area))
	builder.WriteString(", ")
	builder.WriteString("src_name=")
	builder.WriteString(cl.SrcName)
	builder.WriteString(", ")
	builder.WriteString("proc_name=")
	builder.WriteString(cl.ProcName)
	builder.WriteString(", ")
	builder.WriteString("src_oss_url=")
	builder.WriteString(cl.SrcOssURL)
	builder.WriteString(", ")
	builder.WriteString("proc_oss_url=")
	builder.WriteString(cl.ProcOssURL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// CaptureLogs is a parsable slice of CaptureLog.
type CaptureLogs []*CaptureLog
