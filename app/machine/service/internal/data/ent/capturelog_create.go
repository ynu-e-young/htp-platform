// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/capturelog"
)

// CaptureLogCreate is the builder for creating a CaptureLog entity.
type CaptureLogCreate struct {
	config
	mutation *CaptureLogMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMachineID sets the "machine_id" field.
func (clc *CaptureLogCreate) SetMachineID(u uuid.UUID) *CaptureLogCreate {
	clc.mutation.SetMachineID(u)
	return clc
}

// SetPixels sets the "pixels" field.
func (clc *CaptureLogCreate) SetPixels(i int64) *CaptureLogCreate {
	clc.mutation.SetPixels(i)
	return clc
}

// SetArea sets the "area" field.
func (clc *CaptureLogCreate) SetArea(f float64) *CaptureLogCreate {
	clc.mutation.SetArea(f)
	return clc
}

// SetSrcName sets the "src_name" field.
func (clc *CaptureLogCreate) SetSrcName(s string) *CaptureLogCreate {
	clc.mutation.SetSrcName(s)
	return clc
}

// SetProcName sets the "proc_name" field.
func (clc *CaptureLogCreate) SetProcName(s string) *CaptureLogCreate {
	clc.mutation.SetProcName(s)
	return clc
}

// SetSrcOssURL sets the "src_oss_url" field.
func (clc *CaptureLogCreate) SetSrcOssURL(s string) *CaptureLogCreate {
	clc.mutation.SetSrcOssURL(s)
	return clc
}

// SetProcOssURL sets the "proc_oss_url" field.
func (clc *CaptureLogCreate) SetProcOssURL(s string) *CaptureLogCreate {
	clc.mutation.SetProcOssURL(s)
	return clc
}

// SetCreatedAt sets the "created_at" field.
func (clc *CaptureLogCreate) SetCreatedAt(t time.Time) *CaptureLogCreate {
	clc.mutation.SetCreatedAt(t)
	return clc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (clc *CaptureLogCreate) SetNillableCreatedAt(t *time.Time) *CaptureLogCreate {
	if t != nil {
		clc.SetCreatedAt(*t)
	}
	return clc
}

// SetUpdatedAt sets the "updated_at" field.
func (clc *CaptureLogCreate) SetUpdatedAt(t time.Time) *CaptureLogCreate {
	clc.mutation.SetUpdatedAt(t)
	return clc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (clc *CaptureLogCreate) SetNillableUpdatedAt(t *time.Time) *CaptureLogCreate {
	if t != nil {
		clc.SetUpdatedAt(*t)
	}
	return clc
}

// SetID sets the "id" field.
func (clc *CaptureLogCreate) SetID(i int64) *CaptureLogCreate {
	clc.mutation.SetID(i)
	return clc
}

// Mutation returns the CaptureLogMutation object of the builder.
func (clc *CaptureLogCreate) Mutation() *CaptureLogMutation {
	return clc.mutation
}

// Save creates the CaptureLog in the database.
func (clc *CaptureLogCreate) Save(ctx context.Context) (*CaptureLog, error) {
	clc.defaults()
	return withHooks[*CaptureLog, CaptureLogMutation](ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *CaptureLogCreate) SaveX(ctx context.Context) *CaptureLog {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *CaptureLogCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *CaptureLogCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (clc *CaptureLogCreate) defaults() {
	if _, ok := clc.mutation.CreatedAt(); !ok {
		v := capturelog.DefaultCreatedAt()
		clc.mutation.SetCreatedAt(v)
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		v := capturelog.DefaultUpdatedAt()
		clc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *CaptureLogCreate) check() error {
	if _, ok := clc.mutation.MachineID(); !ok {
		return &ValidationError{Name: "machine_id", err: errors.New(`ent: missing required field "CaptureLog.machine_id"`)}
	}
	if _, ok := clc.mutation.Pixels(); !ok {
		return &ValidationError{Name: "pixels", err: errors.New(`ent: missing required field "CaptureLog.pixels"`)}
	}
	if _, ok := clc.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "CaptureLog.area"`)}
	}
	if _, ok := clc.mutation.SrcName(); !ok {
		return &ValidationError{Name: "src_name", err: errors.New(`ent: missing required field "CaptureLog.src_name"`)}
	}
	if _, ok := clc.mutation.ProcName(); !ok {
		return &ValidationError{Name: "proc_name", err: errors.New(`ent: missing required field "CaptureLog.proc_name"`)}
	}
	if _, ok := clc.mutation.SrcOssURL(); !ok {
		return &ValidationError{Name: "src_oss_url", err: errors.New(`ent: missing required field "CaptureLog.src_oss_url"`)}
	}
	if _, ok := clc.mutation.ProcOssURL(); !ok {
		return &ValidationError{Name: "proc_oss_url", err: errors.New(`ent: missing required field "CaptureLog.proc_oss_url"`)}
	}
	if _, ok := clc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CaptureLog.created_at"`)}
	}
	if _, ok := clc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CaptureLog.updated_at"`)}
	}
	return nil
}

func (clc *CaptureLogCreate) sqlSave(ctx context.Context) (*CaptureLog, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *CaptureLogCreate) createSpec() (*CaptureLog, *sqlgraph.CreateSpec) {
	var (
		_node = &CaptureLog{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(capturelog.Table, sqlgraph.NewFieldSpec(capturelog.FieldID, field.TypeInt64))
	)
	_spec.OnConflict = clc.conflict
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.MachineID(); ok {
		_spec.SetField(capturelog.FieldMachineID, field.TypeUUID, value)
		_node.MachineID = value
	}
	if value, ok := clc.mutation.Pixels(); ok {
		_spec.SetField(capturelog.FieldPixels, field.TypeInt64, value)
		_node.Pixels = value
	}
	if value, ok := clc.mutation.Area(); ok {
		_spec.SetField(capturelog.FieldArea, field.TypeFloat64, value)
		_node.Area = value
	}
	if value, ok := clc.mutation.SrcName(); ok {
		_spec.SetField(capturelog.FieldSrcName, field.TypeString, value)
		_node.SrcName = value
	}
	if value, ok := clc.mutation.ProcName(); ok {
		_spec.SetField(capturelog.FieldProcName, field.TypeString, value)
		_node.ProcName = value
	}
	if value, ok := clc.mutation.SrcOssURL(); ok {
		_spec.SetField(capturelog.FieldSrcOssURL, field.TypeString, value)
		_node.SrcOssURL = value
	}
	if value, ok := clc.mutation.ProcOssURL(); ok {
		_spec.SetField(capturelog.FieldProcOssURL, field.TypeString, value)
		_node.ProcOssURL = value
	}
	if value, ok := clc.mutation.CreatedAt(); ok {
		_spec.SetField(capturelog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := clc.mutation.UpdatedAt(); ok {
		_spec.SetField(capturelog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CaptureLog.Create().
//		SetMachineID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CaptureLogUpsert) {
//			SetMachineID(v+v).
//		}).
//		Exec(ctx)
func (clc *CaptureLogCreate) OnConflict(opts ...sql.ConflictOption) *CaptureLogUpsertOne {
	clc.conflict = opts
	return &CaptureLogUpsertOne{
		create: clc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CaptureLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clc *CaptureLogCreate) OnConflictColumns(columns ...string) *CaptureLogUpsertOne {
	clc.conflict = append(clc.conflict, sql.ConflictColumns(columns...))
	return &CaptureLogUpsertOne{
		create: clc,
	}
}

type (
	// CaptureLogUpsertOne is the builder for "upsert"-ing
	//  one CaptureLog node.
	CaptureLogUpsertOne struct {
		create *CaptureLogCreate
	}

	// CaptureLogUpsert is the "OnConflict" setter.
	CaptureLogUpsert struct {
		*sql.UpdateSet
	}
)

// SetMachineID sets the "machine_id" field.
func (u *CaptureLogUpsert) SetMachineID(v uuid.UUID) *CaptureLogUpsert {
	u.Set(capturelog.FieldMachineID, v)
	return u
}

// UpdateMachineID sets the "machine_id" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateMachineID() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldMachineID)
	return u
}

// SetPixels sets the "pixels" field.
func (u *CaptureLogUpsert) SetPixels(v int64) *CaptureLogUpsert {
	u.Set(capturelog.FieldPixels, v)
	return u
}

// UpdatePixels sets the "pixels" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdatePixels() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldPixels)
	return u
}

// AddPixels adds v to the "pixels" field.
func (u *CaptureLogUpsert) AddPixels(v int64) *CaptureLogUpsert {
	u.Add(capturelog.FieldPixels, v)
	return u
}

// SetArea sets the "area" field.
func (u *CaptureLogUpsert) SetArea(v float64) *CaptureLogUpsert {
	u.Set(capturelog.FieldArea, v)
	return u
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateArea() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldArea)
	return u
}

// AddArea adds v to the "area" field.
func (u *CaptureLogUpsert) AddArea(v float64) *CaptureLogUpsert {
	u.Add(capturelog.FieldArea, v)
	return u
}

// SetSrcName sets the "src_name" field.
func (u *CaptureLogUpsert) SetSrcName(v string) *CaptureLogUpsert {
	u.Set(capturelog.FieldSrcName, v)
	return u
}

// UpdateSrcName sets the "src_name" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateSrcName() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldSrcName)
	return u
}

// SetProcName sets the "proc_name" field.
func (u *CaptureLogUpsert) SetProcName(v string) *CaptureLogUpsert {
	u.Set(capturelog.FieldProcName, v)
	return u
}

// UpdateProcName sets the "proc_name" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateProcName() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldProcName)
	return u
}

// SetSrcOssURL sets the "src_oss_url" field.
func (u *CaptureLogUpsert) SetSrcOssURL(v string) *CaptureLogUpsert {
	u.Set(capturelog.FieldSrcOssURL, v)
	return u
}

// UpdateSrcOssURL sets the "src_oss_url" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateSrcOssURL() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldSrcOssURL)
	return u
}

// SetProcOssURL sets the "proc_oss_url" field.
func (u *CaptureLogUpsert) SetProcOssURL(v string) *CaptureLogUpsert {
	u.Set(capturelog.FieldProcOssURL, v)
	return u
}

// UpdateProcOssURL sets the "proc_oss_url" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateProcOssURL() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldProcOssURL)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *CaptureLogUpsert) SetCreatedAt(v time.Time) *CaptureLogUpsert {
	u.Set(capturelog.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateCreatedAt() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CaptureLogUpsert) SetUpdatedAt(v time.Time) *CaptureLogUpsert {
	u.Set(capturelog.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CaptureLogUpsert) UpdateUpdatedAt() *CaptureLogUpsert {
	u.SetExcluded(capturelog.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CaptureLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(capturelog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CaptureLogUpsertOne) UpdateNewValues() *CaptureLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(capturelog.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CaptureLog.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CaptureLogUpsertOne) Ignore() *CaptureLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CaptureLogUpsertOne) DoNothing() *CaptureLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CaptureLogCreate.OnConflict
// documentation for more info.
func (u *CaptureLogUpsertOne) Update(set func(*CaptureLogUpsert)) *CaptureLogUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CaptureLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetMachineID sets the "machine_id" field.
func (u *CaptureLogUpsertOne) SetMachineID(v uuid.UUID) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetMachineID(v)
	})
}

// UpdateMachineID sets the "machine_id" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateMachineID() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateMachineID()
	})
}

// SetPixels sets the "pixels" field.
func (u *CaptureLogUpsertOne) SetPixels(v int64) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetPixels(v)
	})
}

// AddPixels adds v to the "pixels" field.
func (u *CaptureLogUpsertOne) AddPixels(v int64) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.AddPixels(v)
	})
}

// UpdatePixels sets the "pixels" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdatePixels() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdatePixels()
	})
}

// SetArea sets the "area" field.
func (u *CaptureLogUpsertOne) SetArea(v float64) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetArea(v)
	})
}

// AddArea adds v to the "area" field.
func (u *CaptureLogUpsertOne) AddArea(v float64) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.AddArea(v)
	})
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateArea() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateArea()
	})
}

// SetSrcName sets the "src_name" field.
func (u *CaptureLogUpsertOne) SetSrcName(v string) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetSrcName(v)
	})
}

// UpdateSrcName sets the "src_name" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateSrcName() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateSrcName()
	})
}

// SetProcName sets the "proc_name" field.
func (u *CaptureLogUpsertOne) SetProcName(v string) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetProcName(v)
	})
}

// UpdateProcName sets the "proc_name" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateProcName() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateProcName()
	})
}

// SetSrcOssURL sets the "src_oss_url" field.
func (u *CaptureLogUpsertOne) SetSrcOssURL(v string) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetSrcOssURL(v)
	})
}

// UpdateSrcOssURL sets the "src_oss_url" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateSrcOssURL() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateSrcOssURL()
	})
}

// SetProcOssURL sets the "proc_oss_url" field.
func (u *CaptureLogUpsertOne) SetProcOssURL(v string) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetProcOssURL(v)
	})
}

// UpdateProcOssURL sets the "proc_oss_url" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateProcOssURL() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateProcOssURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CaptureLogUpsertOne) SetCreatedAt(v time.Time) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateCreatedAt() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CaptureLogUpsertOne) SetUpdatedAt(v time.Time) *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CaptureLogUpsertOne) UpdateUpdatedAt() *CaptureLogUpsertOne {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *CaptureLogUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CaptureLogCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CaptureLogUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CaptureLogUpsertOne) ID(ctx context.Context) (id int64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CaptureLogUpsertOne) IDX(ctx context.Context) int64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CaptureLogCreateBulk is the builder for creating many CaptureLog entities in bulk.
type CaptureLogCreateBulk struct {
	config
	builders []*CaptureLogCreate
	conflict []sql.ConflictOption
}

// Save creates the CaptureLog entities in the database.
func (clcb *CaptureLogCreateBulk) Save(ctx context.Context) ([]*CaptureLog, error) {
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*CaptureLog, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CaptureLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = clcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *CaptureLogCreateBulk) SaveX(ctx context.Context) []*CaptureLog {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *CaptureLogCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *CaptureLogCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CaptureLog.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CaptureLogUpsert) {
//			SetMachineID(v+v).
//		}).
//		Exec(ctx)
func (clcb *CaptureLogCreateBulk) OnConflict(opts ...sql.ConflictOption) *CaptureLogUpsertBulk {
	clcb.conflict = opts
	return &CaptureLogUpsertBulk{
		create: clcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CaptureLog.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (clcb *CaptureLogCreateBulk) OnConflictColumns(columns ...string) *CaptureLogUpsertBulk {
	clcb.conflict = append(clcb.conflict, sql.ConflictColumns(columns...))
	return &CaptureLogUpsertBulk{
		create: clcb,
	}
}

// CaptureLogUpsertBulk is the builder for "upsert"-ing
// a bulk of CaptureLog nodes.
type CaptureLogUpsertBulk struct {
	create *CaptureLogCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CaptureLog.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(capturelog.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CaptureLogUpsertBulk) UpdateNewValues() *CaptureLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(capturelog.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CaptureLog.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CaptureLogUpsertBulk) Ignore() *CaptureLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CaptureLogUpsertBulk) DoNothing() *CaptureLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CaptureLogCreateBulk.OnConflict
// documentation for more info.
func (u *CaptureLogUpsertBulk) Update(set func(*CaptureLogUpsert)) *CaptureLogUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CaptureLogUpsert{UpdateSet: update})
	}))
	return u
}

// SetMachineID sets the "machine_id" field.
func (u *CaptureLogUpsertBulk) SetMachineID(v uuid.UUID) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetMachineID(v)
	})
}

// UpdateMachineID sets the "machine_id" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateMachineID() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateMachineID()
	})
}

// SetPixels sets the "pixels" field.
func (u *CaptureLogUpsertBulk) SetPixels(v int64) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetPixels(v)
	})
}

// AddPixels adds v to the "pixels" field.
func (u *CaptureLogUpsertBulk) AddPixels(v int64) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.AddPixels(v)
	})
}

// UpdatePixels sets the "pixels" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdatePixels() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdatePixels()
	})
}

// SetArea sets the "area" field.
func (u *CaptureLogUpsertBulk) SetArea(v float64) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetArea(v)
	})
}

// AddArea adds v to the "area" field.
func (u *CaptureLogUpsertBulk) AddArea(v float64) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.AddArea(v)
	})
}

// UpdateArea sets the "area" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateArea() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateArea()
	})
}

// SetSrcName sets the "src_name" field.
func (u *CaptureLogUpsertBulk) SetSrcName(v string) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetSrcName(v)
	})
}

// UpdateSrcName sets the "src_name" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateSrcName() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateSrcName()
	})
}

// SetProcName sets the "proc_name" field.
func (u *CaptureLogUpsertBulk) SetProcName(v string) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetProcName(v)
	})
}

// UpdateProcName sets the "proc_name" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateProcName() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateProcName()
	})
}

// SetSrcOssURL sets the "src_oss_url" field.
func (u *CaptureLogUpsertBulk) SetSrcOssURL(v string) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetSrcOssURL(v)
	})
}

// UpdateSrcOssURL sets the "src_oss_url" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateSrcOssURL() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateSrcOssURL()
	})
}

// SetProcOssURL sets the "proc_oss_url" field.
func (u *CaptureLogUpsertBulk) SetProcOssURL(v string) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetProcOssURL(v)
	})
}

// UpdateProcOssURL sets the "proc_oss_url" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateProcOssURL() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateProcOssURL()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *CaptureLogUpsertBulk) SetCreatedAt(v time.Time) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateCreatedAt() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CaptureLogUpsertBulk) SetUpdatedAt(v time.Time) *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CaptureLogUpsertBulk) UpdateUpdatedAt() *CaptureLogUpsertBulk {
	return u.Update(func(s *CaptureLogUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *CaptureLogUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CaptureLogCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CaptureLogCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CaptureLogUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
