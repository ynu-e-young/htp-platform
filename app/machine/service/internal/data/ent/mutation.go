// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/biz"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/capturelog"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/cronjob"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/machine"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCaptureLog = "CaptureLog"
	TypeCronJob    = "CronJob"
	TypeMachine    = "Machine"
)

// CaptureLogMutation represents an operation that mutates the CaptureLog nodes in the graph.
type CaptureLogMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	machine_id    *uuid.UUID
	pixels        *int64
	addpixels     *int64
	area          *float64
	addarea       *float64
	src_name      *string
	proc_name     *string
	src_oss_url   *string
	proc_oss_url  *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CaptureLog, error)
	predicates    []predicate.CaptureLog
}

var _ ent.Mutation = (*CaptureLogMutation)(nil)

// capturelogOption allows management of the mutation configuration using functional options.
type capturelogOption func(*CaptureLogMutation)

// newCaptureLogMutation creates new mutation for the CaptureLog entity.
func newCaptureLogMutation(c config, op Op, opts ...capturelogOption) *CaptureLogMutation {
	m := &CaptureLogMutation{
		config:        c,
		op:            op,
		typ:           TypeCaptureLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCaptureLogID sets the ID field of the mutation.
func withCaptureLogID(id int64) capturelogOption {
	return func(m *CaptureLogMutation) {
		var (
			err   error
			once  sync.Once
			value *CaptureLog
		)
		m.oldValue = func(ctx context.Context) (*CaptureLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CaptureLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCaptureLog sets the old CaptureLog of the mutation.
func withCaptureLog(node *CaptureLog) capturelogOption {
	return func(m *CaptureLogMutation) {
		m.oldValue = func(context.Context) (*CaptureLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CaptureLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CaptureLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CaptureLog entities.
func (m *CaptureLogMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CaptureLogMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CaptureLogMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CaptureLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMachineID sets the "machine_id" field.
func (m *CaptureLogMutation) SetMachineID(u uuid.UUID) {
	m.machine_id = &u
}

// MachineID returns the value of the "machine_id" field in the mutation.
func (m *CaptureLogMutation) MachineID() (r uuid.UUID, exists bool) {
	v := m.machine_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMachineID returns the old "machine_id" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldMachineID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMachineID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMachineID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMachineID: %w", err)
	}
	return oldValue.MachineID, nil
}

// ResetMachineID resets all changes to the "machine_id" field.
func (m *CaptureLogMutation) ResetMachineID() {
	m.machine_id = nil
}

// SetPixels sets the "pixels" field.
func (m *CaptureLogMutation) SetPixels(i int64) {
	m.pixels = &i
	m.addpixels = nil
}

// Pixels returns the value of the "pixels" field in the mutation.
func (m *CaptureLogMutation) Pixels() (r int64, exists bool) {
	v := m.pixels
	if v == nil {
		return
	}
	return *v, true
}

// OldPixels returns the old "pixels" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldPixels(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPixels is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPixels requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPixels: %w", err)
	}
	return oldValue.Pixels, nil
}

// AddPixels adds i to the "pixels" field.
func (m *CaptureLogMutation) AddPixels(i int64) {
	if m.addpixels != nil {
		*m.addpixels += i
	} else {
		m.addpixels = &i
	}
}

// AddedPixels returns the value that was added to the "pixels" field in this mutation.
func (m *CaptureLogMutation) AddedPixels() (r int64, exists bool) {
	v := m.addpixels
	if v == nil {
		return
	}
	return *v, true
}

// ResetPixels resets all changes to the "pixels" field.
func (m *CaptureLogMutation) ResetPixels() {
	m.pixels = nil
	m.addpixels = nil
}

// SetArea sets the "area" field.
func (m *CaptureLogMutation) SetArea(f float64) {
	m.area = &f
	m.addarea = nil
}

// Area returns the value of the "area" field in the mutation.
func (m *CaptureLogMutation) Area() (r float64, exists bool) {
	v := m.area
	if v == nil {
		return
	}
	return *v, true
}

// OldArea returns the old "area" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldArea(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArea is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArea requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArea: %w", err)
	}
	return oldValue.Area, nil
}

// AddArea adds f to the "area" field.
func (m *CaptureLogMutation) AddArea(f float64) {
	if m.addarea != nil {
		*m.addarea += f
	} else {
		m.addarea = &f
	}
}

// AddedArea returns the value that was added to the "area" field in this mutation.
func (m *CaptureLogMutation) AddedArea() (r float64, exists bool) {
	v := m.addarea
	if v == nil {
		return
	}
	return *v, true
}

// ResetArea resets all changes to the "area" field.
func (m *CaptureLogMutation) ResetArea() {
	m.area = nil
	m.addarea = nil
}

// SetSrcName sets the "src_name" field.
func (m *CaptureLogMutation) SetSrcName(s string) {
	m.src_name = &s
}

// SrcName returns the value of the "src_name" field in the mutation.
func (m *CaptureLogMutation) SrcName() (r string, exists bool) {
	v := m.src_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSrcName returns the old "src_name" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldSrcName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSrcName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSrcName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSrcName: %w", err)
	}
	return oldValue.SrcName, nil
}

// ResetSrcName resets all changes to the "src_name" field.
func (m *CaptureLogMutation) ResetSrcName() {
	m.src_name = nil
}

// SetProcName sets the "proc_name" field.
func (m *CaptureLogMutation) SetProcName(s string) {
	m.proc_name = &s
}

// ProcName returns the value of the "proc_name" field in the mutation.
func (m *CaptureLogMutation) ProcName() (r string, exists bool) {
	v := m.proc_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProcName returns the old "proc_name" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldProcName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcName: %w", err)
	}
	return oldValue.ProcName, nil
}

// ResetProcName resets all changes to the "proc_name" field.
func (m *CaptureLogMutation) ResetProcName() {
	m.proc_name = nil
}

// SetSrcOssURL sets the "src_oss_url" field.
func (m *CaptureLogMutation) SetSrcOssURL(s string) {
	m.src_oss_url = &s
}

// SrcOssURL returns the value of the "src_oss_url" field in the mutation.
func (m *CaptureLogMutation) SrcOssURL() (r string, exists bool) {
	v := m.src_oss_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSrcOssURL returns the old "src_oss_url" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldSrcOssURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSrcOssURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSrcOssURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSrcOssURL: %w", err)
	}
	return oldValue.SrcOssURL, nil
}

// ResetSrcOssURL resets all changes to the "src_oss_url" field.
func (m *CaptureLogMutation) ResetSrcOssURL() {
	m.src_oss_url = nil
}

// SetProcOssURL sets the "proc_oss_url" field.
func (m *CaptureLogMutation) SetProcOssURL(s string) {
	m.proc_oss_url = &s
}

// ProcOssURL returns the value of the "proc_oss_url" field in the mutation.
func (m *CaptureLogMutation) ProcOssURL() (r string, exists bool) {
	v := m.proc_oss_url
	if v == nil {
		return
	}
	return *v, true
}

// OldProcOssURL returns the old "proc_oss_url" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldProcOssURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcOssURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcOssURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcOssURL: %w", err)
	}
	return oldValue.ProcOssURL, nil
}

// ResetProcOssURL resets all changes to the "proc_oss_url" field.
func (m *CaptureLogMutation) ResetProcOssURL() {
	m.proc_oss_url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *CaptureLogMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CaptureLogMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CaptureLogMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CaptureLogMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CaptureLogMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CaptureLog entity.
// If the CaptureLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CaptureLogMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CaptureLogMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CaptureLogMutation builder.
func (m *CaptureLogMutation) Where(ps ...predicate.CaptureLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CaptureLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CaptureLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CaptureLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CaptureLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CaptureLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CaptureLog).
func (m *CaptureLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CaptureLogMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.machine_id != nil {
		fields = append(fields, capturelog.FieldMachineID)
	}
	if m.pixels != nil {
		fields = append(fields, capturelog.FieldPixels)
	}
	if m.area != nil {
		fields = append(fields, capturelog.FieldArea)
	}
	if m.src_name != nil {
		fields = append(fields, capturelog.FieldSrcName)
	}
	if m.proc_name != nil {
		fields = append(fields, capturelog.FieldProcName)
	}
	if m.src_oss_url != nil {
		fields = append(fields, capturelog.FieldSrcOssURL)
	}
	if m.proc_oss_url != nil {
		fields = append(fields, capturelog.FieldProcOssURL)
	}
	if m.created_at != nil {
		fields = append(fields, capturelog.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, capturelog.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CaptureLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case capturelog.FieldMachineID:
		return m.MachineID()
	case capturelog.FieldPixels:
		return m.Pixels()
	case capturelog.FieldArea:
		return m.Area()
	case capturelog.FieldSrcName:
		return m.SrcName()
	case capturelog.FieldProcName:
		return m.ProcName()
	case capturelog.FieldSrcOssURL:
		return m.SrcOssURL()
	case capturelog.FieldProcOssURL:
		return m.ProcOssURL()
	case capturelog.FieldCreatedAt:
		return m.CreatedAt()
	case capturelog.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CaptureLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case capturelog.FieldMachineID:
		return m.OldMachineID(ctx)
	case capturelog.FieldPixels:
		return m.OldPixels(ctx)
	case capturelog.FieldArea:
		return m.OldArea(ctx)
	case capturelog.FieldSrcName:
		return m.OldSrcName(ctx)
	case capturelog.FieldProcName:
		return m.OldProcName(ctx)
	case capturelog.FieldSrcOssURL:
		return m.OldSrcOssURL(ctx)
	case capturelog.FieldProcOssURL:
		return m.OldProcOssURL(ctx)
	case capturelog.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case capturelog.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CaptureLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CaptureLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case capturelog.FieldMachineID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMachineID(v)
		return nil
	case capturelog.FieldPixels:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPixels(v)
		return nil
	case capturelog.FieldArea:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArea(v)
		return nil
	case capturelog.FieldSrcName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSrcName(v)
		return nil
	case capturelog.FieldProcName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcName(v)
		return nil
	case capturelog.FieldSrcOssURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSrcOssURL(v)
		return nil
	case capturelog.FieldProcOssURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcOssURL(v)
		return nil
	case capturelog.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case capturelog.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CaptureLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CaptureLogMutation) AddedFields() []string {
	var fields []string
	if m.addpixels != nil {
		fields = append(fields, capturelog.FieldPixels)
	}
	if m.addarea != nil {
		fields = append(fields, capturelog.FieldArea)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CaptureLogMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case capturelog.FieldPixels:
		return m.AddedPixels()
	case capturelog.FieldArea:
		return m.AddedArea()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CaptureLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	case capturelog.FieldPixels:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPixels(v)
		return nil
	case capturelog.FieldArea:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddArea(v)
		return nil
	}
	return fmt.Errorf("unknown CaptureLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CaptureLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CaptureLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CaptureLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CaptureLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CaptureLogMutation) ResetField(name string) error {
	switch name {
	case capturelog.FieldMachineID:
		m.ResetMachineID()
		return nil
	case capturelog.FieldPixels:
		m.ResetPixels()
		return nil
	case capturelog.FieldArea:
		m.ResetArea()
		return nil
	case capturelog.FieldSrcName:
		m.ResetSrcName()
		return nil
	case capturelog.FieldProcName:
		m.ResetProcName()
		return nil
	case capturelog.FieldSrcOssURL:
		m.ResetSrcOssURL()
		return nil
	case capturelog.FieldProcOssURL:
		m.ResetProcOssURL()
		return nil
	case capturelog.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case capturelog.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CaptureLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CaptureLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CaptureLogMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CaptureLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CaptureLogMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CaptureLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CaptureLogMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CaptureLogMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CaptureLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CaptureLogMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CaptureLog edge %s", name)
}

// CronJobMutation represents an operation that mutates the CronJob nodes in the graph.
type CronJobMutation struct {
	config
	op                Op
	typ               string
	id                *int64
	machine_id        *uuid.UUID
	check_name        *string
	cron_string       *string
	coordinates       *[]*biz.CheckCoordinate
	appendcoordinates []*biz.CheckCoordinate
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	done              bool
	oldValue          func(context.Context) (*CronJob, error)
	predicates        []predicate.CronJob
}

var _ ent.Mutation = (*CronJobMutation)(nil)

// cronjobOption allows management of the mutation configuration using functional options.
type cronjobOption func(*CronJobMutation)

// newCronJobMutation creates new mutation for the CronJob entity.
func newCronJobMutation(c config, op Op, opts ...cronjobOption) *CronJobMutation {
	m := &CronJobMutation{
		config:        c,
		op:            op,
		typ:           TypeCronJob,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCronJobID sets the ID field of the mutation.
func withCronJobID(id int64) cronjobOption {
	return func(m *CronJobMutation) {
		var (
			err   error
			once  sync.Once
			value *CronJob
		)
		m.oldValue = func(ctx context.Context) (*CronJob, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CronJob.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCronJob sets the old CronJob of the mutation.
func withCronJob(node *CronJob) cronjobOption {
	return func(m *CronJobMutation) {
		m.oldValue = func(context.Context) (*CronJob, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CronJobMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CronJobMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CronJob entities.
func (m *CronJobMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CronJobMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CronJobMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CronJob.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMachineID sets the "machine_id" field.
func (m *CronJobMutation) SetMachineID(u uuid.UUID) {
	m.machine_id = &u
}

// MachineID returns the value of the "machine_id" field in the mutation.
func (m *CronJobMutation) MachineID() (r uuid.UUID, exists bool) {
	v := m.machine_id
	if v == nil {
		return
	}
	return *v, true
}

// OldMachineID returns the old "machine_id" field's value of the CronJob entity.
// If the CronJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobMutation) OldMachineID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMachineID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMachineID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMachineID: %w", err)
	}
	return oldValue.MachineID, nil
}

// ResetMachineID resets all changes to the "machine_id" field.
func (m *CronJobMutation) ResetMachineID() {
	m.machine_id = nil
}

// SetCheckName sets the "check_name" field.
func (m *CronJobMutation) SetCheckName(s string) {
	m.check_name = &s
}

// CheckName returns the value of the "check_name" field in the mutation.
func (m *CronJobMutation) CheckName() (r string, exists bool) {
	v := m.check_name
	if v == nil {
		return
	}
	return *v, true
}

// OldCheckName returns the old "check_name" field's value of the CronJob entity.
// If the CronJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobMutation) OldCheckName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCheckName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCheckName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCheckName: %w", err)
	}
	return oldValue.CheckName, nil
}

// ResetCheckName resets all changes to the "check_name" field.
func (m *CronJobMutation) ResetCheckName() {
	m.check_name = nil
}

// SetCronString sets the "cron_string" field.
func (m *CronJobMutation) SetCronString(s string) {
	m.cron_string = &s
}

// CronString returns the value of the "cron_string" field in the mutation.
func (m *CronJobMutation) CronString() (r string, exists bool) {
	v := m.cron_string
	if v == nil {
		return
	}
	return *v, true
}

// OldCronString returns the old "cron_string" field's value of the CronJob entity.
// If the CronJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobMutation) OldCronString(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCronString is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCronString requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCronString: %w", err)
	}
	return oldValue.CronString, nil
}

// ResetCronString resets all changes to the "cron_string" field.
func (m *CronJobMutation) ResetCronString() {
	m.cron_string = nil
}

// SetCoordinates sets the "coordinates" field.
func (m *CronJobMutation) SetCoordinates(bc []*biz.CheckCoordinate) {
	m.coordinates = &bc
	m.appendcoordinates = nil
}

// Coordinates returns the value of the "coordinates" field in the mutation.
func (m *CronJobMutation) Coordinates() (r []*biz.CheckCoordinate, exists bool) {
	v := m.coordinates
	if v == nil {
		return
	}
	return *v, true
}

// OldCoordinates returns the old "coordinates" field's value of the CronJob entity.
// If the CronJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobMutation) OldCoordinates(ctx context.Context) (v []*biz.CheckCoordinate, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoordinates is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoordinates requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoordinates: %w", err)
	}
	return oldValue.Coordinates, nil
}

// AppendCoordinates adds bc to the "coordinates" field.
func (m *CronJobMutation) AppendCoordinates(bc []*biz.CheckCoordinate) {
	m.appendcoordinates = append(m.appendcoordinates, bc...)
}

// AppendedCoordinates returns the list of values that were appended to the "coordinates" field in this mutation.
func (m *CronJobMutation) AppendedCoordinates() ([]*biz.CheckCoordinate, bool) {
	if len(m.appendcoordinates) == 0 {
		return nil, false
	}
	return m.appendcoordinates, true
}

// ClearCoordinates clears the value of the "coordinates" field.
func (m *CronJobMutation) ClearCoordinates() {
	m.coordinates = nil
	m.appendcoordinates = nil
	m.clearedFields[cronjob.FieldCoordinates] = struct{}{}
}

// CoordinatesCleared returns if the "coordinates" field was cleared in this mutation.
func (m *CronJobMutation) CoordinatesCleared() bool {
	_, ok := m.clearedFields[cronjob.FieldCoordinates]
	return ok
}

// ResetCoordinates resets all changes to the "coordinates" field.
func (m *CronJobMutation) ResetCoordinates() {
	m.coordinates = nil
	m.appendcoordinates = nil
	delete(m.clearedFields, cronjob.FieldCoordinates)
}

// SetCreatedAt sets the "created_at" field.
func (m *CronJobMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CronJobMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CronJob entity.
// If the CronJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CronJobMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CronJobMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CronJobMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CronJob entity.
// If the CronJob object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CronJobMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the CronJobMutation builder.
func (m *CronJobMutation) Where(ps ...predicate.CronJob) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CronJobMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CronJobMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CronJob, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CronJobMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CronJobMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CronJob).
func (m *CronJobMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CronJobMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.machine_id != nil {
		fields = append(fields, cronjob.FieldMachineID)
	}
	if m.check_name != nil {
		fields = append(fields, cronjob.FieldCheckName)
	}
	if m.cron_string != nil {
		fields = append(fields, cronjob.FieldCronString)
	}
	if m.coordinates != nil {
		fields = append(fields, cronjob.FieldCoordinates)
	}
	if m.created_at != nil {
		fields = append(fields, cronjob.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cronjob.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CronJobMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cronjob.FieldMachineID:
		return m.MachineID()
	case cronjob.FieldCheckName:
		return m.CheckName()
	case cronjob.FieldCronString:
		return m.CronString()
	case cronjob.FieldCoordinates:
		return m.Coordinates()
	case cronjob.FieldCreatedAt:
		return m.CreatedAt()
	case cronjob.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CronJobMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cronjob.FieldMachineID:
		return m.OldMachineID(ctx)
	case cronjob.FieldCheckName:
		return m.OldCheckName(ctx)
	case cronjob.FieldCronString:
		return m.OldCronString(ctx)
	case cronjob.FieldCoordinates:
		return m.OldCoordinates(ctx)
	case cronjob.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cronjob.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown CronJob field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CronJobMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cronjob.FieldMachineID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMachineID(v)
		return nil
	case cronjob.FieldCheckName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCheckName(v)
		return nil
	case cronjob.FieldCronString:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCronString(v)
		return nil
	case cronjob.FieldCoordinates:
		v, ok := value.([]*biz.CheckCoordinate)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoordinates(v)
		return nil
	case cronjob.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cronjob.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown CronJob field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CronJobMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CronJobMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CronJobMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CronJob numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CronJobMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cronjob.FieldCoordinates) {
		fields = append(fields, cronjob.FieldCoordinates)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CronJobMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CronJobMutation) ClearField(name string) error {
	switch name {
	case cronjob.FieldCoordinates:
		m.ClearCoordinates()
		return nil
	}
	return fmt.Errorf("unknown CronJob nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CronJobMutation) ResetField(name string) error {
	switch name {
	case cronjob.FieldMachineID:
		m.ResetMachineID()
		return nil
	case cronjob.FieldCheckName:
		m.ResetCheckName()
		return nil
	case cronjob.FieldCronString:
		m.ResetCronString()
		return nil
	case cronjob.FieldCoordinates:
		m.ResetCoordinates()
		return nil
	case cronjob.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cronjob.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown CronJob field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CronJobMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CronJobMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CronJobMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CronJobMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CronJobMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CronJobMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CronJobMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CronJob unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CronJobMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CronJob edge %s", name)
}

// MachineMutation represents an operation that mutates the Machine nodes in the graph.
type MachineMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	user_id       *int64
	adduser_id    *int64
	address       *string
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Machine, error)
	predicates    []predicate.Machine
}

var _ ent.Mutation = (*MachineMutation)(nil)

// machineOption allows management of the mutation configuration using functional options.
type machineOption func(*MachineMutation)

// newMachineMutation creates new mutation for the Machine entity.
func newMachineMutation(c config, op Op, opts ...machineOption) *MachineMutation {
	m := &MachineMutation{
		config:        c,
		op:            op,
		typ:           TypeMachine,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMachineID sets the ID field of the mutation.
func withMachineID(id uuid.UUID) machineOption {
	return func(m *MachineMutation) {
		var (
			err   error
			once  sync.Once
			value *Machine
		)
		m.oldValue = func(ctx context.Context) (*Machine, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Machine.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMachine sets the old Machine of the mutation.
func withMachine(node *Machine) machineOption {
	return func(m *MachineMutation) {
		m.oldValue = func(context.Context) (*Machine, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MachineMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MachineMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Machine entities.
func (m *MachineMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MachineMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MachineMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Machine.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *MachineMutation) SetUserID(i int64) {
	m.user_id = &i
	m.adduser_id = nil
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *MachineMutation) UserID() (r int64, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldUserID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds i to the "user_id" field.
func (m *MachineMutation) AddUserID(i int64) {
	if m.adduser_id != nil {
		*m.adduser_id += i
	} else {
		m.adduser_id = &i
	}
}

// AddedUserID returns the value that was added to the "user_id" field in this mutation.
func (m *MachineMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduser_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *MachineMutation) ResetUserID() {
	m.user_id = nil
	m.adduser_id = nil
}

// SetAddress sets the "address" field.
func (m *MachineMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *MachineMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *MachineMutation) ResetAddress() {
	m.address = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MachineMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MachineMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MachineMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MachineMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MachineMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Machine entity.
// If the Machine object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MachineMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MachineMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MachineMutation builder.
func (m *MachineMutation) Where(ps ...predicate.Machine) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MachineMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MachineMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Machine, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MachineMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MachineMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Machine).
func (m *MachineMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MachineMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, machine.FieldUserID)
	}
	if m.address != nil {
		fields = append(fields, machine.FieldAddress)
	}
	if m.created_at != nil {
		fields = append(fields, machine.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, machine.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MachineMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case machine.FieldUserID:
		return m.UserID()
	case machine.FieldAddress:
		return m.Address()
	case machine.FieldCreatedAt:
		return m.CreatedAt()
	case machine.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MachineMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case machine.FieldUserID:
		return m.OldUserID(ctx)
	case machine.FieldAddress:
		return m.OldAddress(ctx)
	case machine.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case machine.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Machine field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MachineMutation) SetField(name string, value ent.Value) error {
	switch name {
	case machine.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case machine.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case machine.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case machine.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Machine field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MachineMutation) AddedFields() []string {
	var fields []string
	if m.adduser_id != nil {
		fields = append(fields, machine.FieldUserID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MachineMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case machine.FieldUserID:
		return m.AddedUserID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MachineMutation) AddField(name string, value ent.Value) error {
	switch name {
	case machine.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUserID(v)
		return nil
	}
	return fmt.Errorf("unknown Machine numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MachineMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MachineMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MachineMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Machine nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MachineMutation) ResetField(name string) error {
	switch name {
	case machine.FieldUserID:
		m.ResetUserID()
		return nil
	case machine.FieldAddress:
		m.ResetAddress()
		return nil
	case machine.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case machine.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Machine field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MachineMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MachineMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MachineMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MachineMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MachineMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MachineMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MachineMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Machine unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MachineMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Machine edge %s", name)
}
