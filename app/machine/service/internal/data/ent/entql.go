// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/capturelog"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/cronjob"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/machine"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 3)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   capturelog.Table,
			Columns: capturelog.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: capturelog.FieldID,
			},
		},
		Type: "CaptureLog",
		Fields: map[string]*sqlgraph.FieldSpec{
			capturelog.FieldMachineID:  {Type: field.TypeUUID, Column: capturelog.FieldMachineID},
			capturelog.FieldPixels:     {Type: field.TypeInt64, Column: capturelog.FieldPixels},
			capturelog.FieldArea:       {Type: field.TypeFloat64, Column: capturelog.FieldArea},
			capturelog.FieldSrcName:    {Type: field.TypeString, Column: capturelog.FieldSrcName},
			capturelog.FieldProcName:   {Type: field.TypeString, Column: capturelog.FieldProcName},
			capturelog.FieldSrcOssURL:  {Type: field.TypeString, Column: capturelog.FieldSrcOssURL},
			capturelog.FieldProcOssURL: {Type: field.TypeString, Column: capturelog.FieldProcOssURL},
			capturelog.FieldCreatedAt:  {Type: field.TypeTime, Column: capturelog.FieldCreatedAt},
			capturelog.FieldUpdatedAt:  {Type: field.TypeTime, Column: capturelog.FieldUpdatedAt},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cronjob.Table,
			Columns: cronjob.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: cronjob.FieldID,
			},
		},
		Type: "CronJob",
		Fields: map[string]*sqlgraph.FieldSpec{
			cronjob.FieldMachineID:   {Type: field.TypeUUID, Column: cronjob.FieldMachineID},
			cronjob.FieldCheckName:   {Type: field.TypeString, Column: cronjob.FieldCheckName},
			cronjob.FieldCronString:  {Type: field.TypeString, Column: cronjob.FieldCronString},
			cronjob.FieldCoordinates: {Type: field.TypeJSON, Column: cronjob.FieldCoordinates},
			cronjob.FieldCreatedAt:   {Type: field.TypeTime, Column: cronjob.FieldCreatedAt},
			cronjob.FieldUpdatedAt:   {Type: field.TypeTime, Column: cronjob.FieldUpdatedAt},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   machine.Table,
			Columns: machine.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: machine.FieldID,
			},
		},
		Type: "Machine",
		Fields: map[string]*sqlgraph.FieldSpec{
			machine.FieldUserID:    {Type: field.TypeInt64, Column: machine.FieldUserID},
			machine.FieldAddress:   {Type: field.TypeString, Column: machine.FieldAddress},
			machine.FieldCreatedAt: {Type: field.TypeTime, Column: machine.FieldCreatedAt},
			machine.FieldUpdatedAt: {Type: field.TypeTime, Column: machine.FieldUpdatedAt},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (clq *CaptureLogQuery) addPredicate(pred func(s *sql.Selector)) {
	clq.predicates = append(clq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CaptureLogQuery builder.
func (clq *CaptureLogQuery) Filter() *CaptureLogFilter {
	return &CaptureLogFilter{config: clq.config, predicateAdder: clq}
}

// addPredicate implements the predicateAdder interface.
func (m *CaptureLogMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CaptureLogMutation builder.
func (m *CaptureLogMutation) Filter() *CaptureLogFilter {
	return &CaptureLogFilter{config: m.config, predicateAdder: m}
}

// CaptureLogFilter provides a generic filtering capability at runtime for CaptureLogQuery.
type CaptureLogFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CaptureLogFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *CaptureLogFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(capturelog.FieldID))
}

// WhereMachineID applies the entql [16]byte predicate on the machine_id field.
func (f *CaptureLogFilter) WhereMachineID(p entql.ValueP) {
	f.Where(p.Field(capturelog.FieldMachineID))
}

// WherePixels applies the entql int64 predicate on the pixels field.
func (f *CaptureLogFilter) WherePixels(p entql.Int64P) {
	f.Where(p.Field(capturelog.FieldPixels))
}

// WhereArea applies the entql float64 predicate on the area field.
func (f *CaptureLogFilter) WhereArea(p entql.Float64P) {
	f.Where(p.Field(capturelog.FieldArea))
}

// WhereSrcName applies the entql string predicate on the src_name field.
func (f *CaptureLogFilter) WhereSrcName(p entql.StringP) {
	f.Where(p.Field(capturelog.FieldSrcName))
}

// WhereProcName applies the entql string predicate on the proc_name field.
func (f *CaptureLogFilter) WhereProcName(p entql.StringP) {
	f.Where(p.Field(capturelog.FieldProcName))
}

// WhereSrcOssURL applies the entql string predicate on the src_oss_url field.
func (f *CaptureLogFilter) WhereSrcOssURL(p entql.StringP) {
	f.Where(p.Field(capturelog.FieldSrcOssURL))
}

// WhereProcOssURL applies the entql string predicate on the proc_oss_url field.
func (f *CaptureLogFilter) WhereProcOssURL(p entql.StringP) {
	f.Where(p.Field(capturelog.FieldProcOssURL))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CaptureLogFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(capturelog.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CaptureLogFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(capturelog.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (cjq *CronJobQuery) addPredicate(pred func(s *sql.Selector)) {
	cjq.predicates = append(cjq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CronJobQuery builder.
func (cjq *CronJobQuery) Filter() *CronJobFilter {
	return &CronJobFilter{config: cjq.config, predicateAdder: cjq}
}

// addPredicate implements the predicateAdder interface.
func (m *CronJobMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CronJobMutation builder.
func (m *CronJobMutation) Filter() *CronJobFilter {
	return &CronJobFilter{config: m.config, predicateAdder: m}
}

// CronJobFilter provides a generic filtering capability at runtime for CronJobQuery.
type CronJobFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CronJobFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql int64 predicate on the id field.
func (f *CronJobFilter) WhereID(p entql.Int64P) {
	f.Where(p.Field(cronjob.FieldID))
}

// WhereMachineID applies the entql [16]byte predicate on the machine_id field.
func (f *CronJobFilter) WhereMachineID(p entql.ValueP) {
	f.Where(p.Field(cronjob.FieldMachineID))
}

// WhereCheckName applies the entql string predicate on the check_name field.
func (f *CronJobFilter) WhereCheckName(p entql.StringP) {
	f.Where(p.Field(cronjob.FieldCheckName))
}

// WhereCronString applies the entql string predicate on the cron_string field.
func (f *CronJobFilter) WhereCronString(p entql.StringP) {
	f.Where(p.Field(cronjob.FieldCronString))
}

// WhereCoordinates applies the entql json.RawMessage predicate on the coordinates field.
func (f *CronJobFilter) WhereCoordinates(p entql.BytesP) {
	f.Where(p.Field(cronjob.FieldCoordinates))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CronJobFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cronjob.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CronJobFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cronjob.FieldUpdatedAt))
}

// addPredicate implements the predicateAdder interface.
func (mq *MachineQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MachineQuery builder.
func (mq *MachineQuery) Filter() *MachineFilter {
	return &MachineFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MachineMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MachineMutation builder.
func (m *MachineMutation) Filter() *MachineFilter {
	return &MachineFilter{config: m.config, predicateAdder: m}
}

// MachineFilter provides a generic filtering capability at runtime for MachineQuery.
type MachineFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MachineFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MachineFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(machine.FieldID))
}

// WhereUserID applies the entql int64 predicate on the user_id field.
func (f *MachineFilter) WhereUserID(p entql.Int64P) {
	f.Where(p.Field(machine.FieldUserID))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *MachineFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(machine.FieldAddress))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *MachineFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(machine.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *MachineFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(machine.FieldUpdatedAt))
}
