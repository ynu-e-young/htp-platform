// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/cronjob"
	"github.com/ynu-e-young/htp-platform/app/machine/service/internal/data/ent/predicate"
)

// CronJobDelete is the builder for deleting a CronJob entity.
type CronJobDelete struct {
	config
	hooks    []Hook
	mutation *CronJobMutation
}

// Where appends a list predicates to the CronJobDelete builder.
func (cjd *CronJobDelete) Where(ps ...predicate.CronJob) *CronJobDelete {
	cjd.mutation.Where(ps...)
	return cjd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cjd *CronJobDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, CronJobMutation](ctx, cjd.sqlExec, cjd.mutation, cjd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cjd *CronJobDelete) ExecX(ctx context.Context) int {
	n, err := cjd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cjd *CronJobDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(cronjob.Table, sqlgraph.NewFieldSpec(cronjob.FieldID, field.TypeInt64))
	if ps := cjd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cjd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cjd.mutation.done = true
	return affected, err
}

// CronJobDeleteOne is the builder for deleting a single CronJob entity.
type CronJobDeleteOne struct {
	cjd *CronJobDelete
}

// Where appends a list predicates to the CronJobDelete builder.
func (cjdo *CronJobDeleteOne) Where(ps ...predicate.CronJob) *CronJobDeleteOne {
	cjdo.cjd.mutation.Where(ps...)
	return cjdo
}

// Exec executes the deletion query.
func (cjdo *CronJobDeleteOne) Exec(ctx context.Context) error {
	n, err := cjdo.cjd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{cronjob.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cjdo *CronJobDeleteOne) ExecX(ctx context.Context) {
	if err := cjdo.Exec(ctx); err != nil {
		panic(err)
	}
}
