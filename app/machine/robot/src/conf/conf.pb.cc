// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/conf/conf.proto

#include "src/conf/conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace config {
PROTOBUF_CONSTEXPR Bootstrap::Bootstrap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_)*/nullptr
  , /*decltype(_impl_.local_)*/nullptr
  , /*decltype(_impl_.serial_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BootstrapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BootstrapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BootstrapDefaultTypeInternal() {}
  union {
    Bootstrap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BootstrapDefaultTypeInternal _Bootstrap_default_instance_;
PROTOBUF_CONSTEXPR Server_GRPC::Server_GRPC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Server_GRPCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Server_GRPCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Server_GRPCDefaultTypeInternal() {}
  union {
    Server_GRPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Server_GRPCDefaultTypeInternal _Server_GRPC_default_instance_;
PROTOBUF_CONSTEXPR Server::Server(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpc_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerDefaultTypeInternal() {}
  union {
    Server _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerDefaultTypeInternal _Server_default_instance_;
PROTOBUF_CONSTEXPR Local_GRPC::Local_GRPC(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.network_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.addr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timeout_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Local_GRPCDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Local_GRPCDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Local_GRPCDefaultTypeInternal() {}
  union {
    Local_GRPC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Local_GRPCDefaultTypeInternal _Local_GRPC_default_instance_;
PROTOBUF_CONSTEXPR Local::Local(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grpc_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalDefaultTypeInternal() {}
  union {
    Local _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalDefaultTypeInternal _Local_default_instance_;
PROTOBUF_CONSTEXPR Serial::Serial(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.serial_port_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.baud_rate_)*/0
  , /*decltype(_impl_.data_bits_)*/0
  , /*decltype(_impl_.stop_bits_)*/0
  , /*decltype(_impl_.parity_)*/0
  , /*decltype(_impl_.flow_control_)*/false
  , /*decltype(_impl_.clocal_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SerialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SerialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SerialDefaultTypeInternal() {}
  union {
    Serial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SerialDefaultTypeInternal _Serial_default_instance_;
PROTOBUF_CONSTEXPR PlatInfo_InternalArray::PlatInfo_InternalArray(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.index_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlatInfo_InternalArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatInfo_InternalArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatInfo_InternalArrayDefaultTypeInternal() {}
  union {
    PlatInfo_InternalArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatInfo_InternalArrayDefaultTypeInternal _PlatInfo_InternalArray_default_instance_;
PROTOBUF_CONSTEXPR PlatInfo::PlatInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ancher_)*/{}
  , /*decltype(_impl_.plate_)*/{}
  , /*decltype(_impl_.ltmp_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlatInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatInfoDefaultTypeInternal() {}
  union {
    PlatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatInfoDefaultTypeInternal _PlatInfo_default_instance_;
}  // namespace config
static ::_pb::Metadata file_level_metadata_src_2fconf_2fconf_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_src_2fconf_2fconf_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_src_2fconf_2fconf_2eproto = nullptr;

const uint32_t TableStruct_src_2fconf_2fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Bootstrap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Bootstrap, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::config::Bootstrap, _impl_.local_),
  PROTOBUF_FIELD_OFFSET(::config::Bootstrap, _impl_.serial_),
  PROTOBUF_FIELD_OFFSET(::config::Bootstrap, _impl_.uuid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Server_GRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Server_GRPC, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::config::Server_GRPC, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::config::Server_GRPC, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Server, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Server, _impl_.grpc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Local_GRPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Local_GRPC, _impl_.network_),
  PROTOBUF_FIELD_OFFSET(::config::Local_GRPC, _impl_.addr_),
  PROTOBUF_FIELD_OFFSET(::config::Local_GRPC, _impl_.timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Local, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Local, _impl_.grpc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::Serial, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.serial_port_),
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.baud_rate_),
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.data_bits_),
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.stop_bits_),
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.parity_),
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.flow_control_),
  PROTOBUF_FIELD_OFFSET(::config::Serial, _impl_.clocal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo_InternalArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo_InternalArray, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo_InternalArray, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo, _impl_.ltmp_),
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo, _impl_.ancher_),
  PROTOBUF_FIELD_OFFSET(::config::PlatInfo, _impl_.plate_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::config::Bootstrap)},
  { 10, -1, -1, sizeof(::config::Server_GRPC)},
  { 19, -1, -1, sizeof(::config::Server)},
  { 26, -1, -1, sizeof(::config::Local_GRPC)},
  { 35, -1, -1, sizeof(::config::Local)},
  { 42, -1, -1, sizeof(::config::Serial)},
  { 55, -1, -1, sizeof(::config::PlatInfo_InternalArray)},
  { 63, -1, -1, sizeof(::config::PlatInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::config::_Bootstrap_default_instance_._instance,
  &::config::_Server_GRPC_default_instance_._instance,
  &::config::_Server_default_instance_._instance,
  &::config::_Local_GRPC_default_instance_._instance,
  &::config::_Local_default_instance_._instance,
  &::config::_Serial_default_instance_._instance,
  &::config::_PlatInfo_InternalArray_default_instance_._instance,
  &::config::_PlatInfo_default_instance_._instance,
};

const char descriptor_table_protodef_src_2fconf_2fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023src/conf/conf.proto\022\006config\032\036google/pr"
  "otobuf/duration.proto\"\224\001\n\tBootstrap\022&\n\006s"
  "erver\030\001 \001(\0132\016.config.ServerR\006server\022#\n\005l"
  "ocal\030\002 \001(\0132\r.config.LocalR\005local\022&\n\006seri"
  "al\030\003 \001(\0132\016.config.SerialR\006serial\022\022\n\004uuid"
  "\030\004 \001(\tR\004uuid\"\234\001\n\006Server\022\'\n\004grpc\030\001 \001(\0132\023."
  "config.Server.GRPCR\004grpc\032i\n\004GRPC\022\030\n\007netw"
  "ork\030\001 \001(\tR\007network\022\022\n\004addr\030\002 \001(\tR\004addr\0223"
  "\n\007timeout\030\003 \001(\0132\031.google.protobuf.Durati"
  "onR\007timeout\"\232\001\n\005Local\022&\n\004grpc\030\001 \001(\0132\022.co"
  "nfig.Local.GRPCR\004grpc\032i\n\004GRPC\022\030\n\007network"
  "\030\001 \001(\tR\007network\022\022\n\004addr\030\002 \001(\tR\004addr\0223\n\007t"
  "imeout\030\003 \001(\0132\031.google.protobuf.DurationR"
  "\007timeout\"\323\001\n\006Serial\022\037\n\013serial_port\030\001 \001(\t"
  "R\nserialPort\022\033\n\tbaud_rate\030\002 \001(\005R\010baudRat"
  "e\022\033\n\tdata_bits\030\003 \001(\005R\010dataBits\022\033\n\tstop_b"
  "its\030\004 \001(\005R\010stopBits\022\026\n\006parity\030\005 \001(\005R\006par"
  "ity\022!\n\014flow_control\030\006 \001(\010R\013flowControl\022\026"
  "\n\006clocal\030\007 \001(\010R\006clocal\"\311\001\n\010PlatInfo\022\022\n\004l"
  "tmp\030\001 \001(\005R\004ltmp\0226\n\006ancher\030\002 \003(\0132\036.config"
  ".PlatInfo.InternalArrayR\006ancher\0224\n\005plate"
  "\030\003 \003(\0132\036.config.PlatInfo.InternalArrayR\005"
  "plate\032;\n\rInternalArray\022\024\n\005index\030\001 \001(\003R\005i"
  "ndex\022\024\n\005items\030\002 \003(\001R\005itemsb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_src_2fconf_2fconf_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::_pbi::once_flag descriptor_table_src_2fconf_2fconf_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_src_2fconf_2fconf_2eproto = {
    false, false, 954, descriptor_table_protodef_src_2fconf_2fconf_2eproto,
    "src/conf/conf.proto",
    &descriptor_table_src_2fconf_2fconf_2eproto_once, descriptor_table_src_2fconf_2fconf_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_src_2fconf_2fconf_2eproto::offsets,
    file_level_metadata_src_2fconf_2fconf_2eproto, file_level_enum_descriptors_src_2fconf_2fconf_2eproto,
    file_level_service_descriptors_src_2fconf_2fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_src_2fconf_2fconf_2eproto_getter() {
  return &descriptor_table_src_2fconf_2fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_src_2fconf_2fconf_2eproto(&descriptor_table_src_2fconf_2fconf_2eproto);
namespace config {

// ===================================================================

class Bootstrap::_Internal {
 public:
  static const ::config::Server& server(const Bootstrap* msg);
  static const ::config::Local& local(const Bootstrap* msg);
  static const ::config::Serial& serial(const Bootstrap* msg);
};

const ::config::Server&
Bootstrap::_Internal::server(const Bootstrap* msg) {
  return *msg->_impl_.server_;
}
const ::config::Local&
Bootstrap::_Internal::local(const Bootstrap* msg) {
  return *msg->_impl_.local_;
}
const ::config::Serial&
Bootstrap::_Internal::serial(const Bootstrap* msg) {
  return *msg->_impl_.serial_;
}
Bootstrap::Bootstrap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Bootstrap)
}
Bootstrap::Bootstrap(const Bootstrap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bootstrap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.server_){nullptr}
    , decltype(_impl_.local_){nullptr}
    , decltype(_impl_.serial_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_server()) {
    _this->_impl_.server_ = new ::config::Server(*from._impl_.server_);
  }
  if (from._internal_has_local()) {
    _this->_impl_.local_ = new ::config::Local(*from._impl_.local_);
  }
  if (from._internal_has_serial()) {
    _this->_impl_.serial_ = new ::config::Serial(*from._impl_.serial_);
  }
  // @@protoc_insertion_point(copy_constructor:config.Bootstrap)
}

inline void Bootstrap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuid_){}
    , decltype(_impl_.server_){nullptr}
    , decltype(_impl_.local_){nullptr}
    , decltype(_impl_.serial_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bootstrap::~Bootstrap() {
  // @@protoc_insertion_point(destructor:config.Bootstrap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bootstrap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.Destroy();
  if (this != internal_default_instance()) delete _impl_.server_;
  if (this != internal_default_instance()) delete _impl_.local_;
  if (this != internal_default_instance()) delete _impl_.serial_;
}

void Bootstrap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bootstrap::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Bootstrap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.server_ != nullptr) {
    delete _impl_.server_;
  }
  _impl_.server_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.local_ != nullptr) {
    delete _impl_.local_;
  }
  _impl_.local_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.serial_ != nullptr) {
    delete _impl_.serial_;
  }
  _impl_.serial_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bootstrap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .config.Server server = 1 [json_name = "server"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .config.Local local = 2 [json_name = "local"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .config.Serial serial = 3 [json_name = "serial"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_serial(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string uuid = 4 [json_name = "uuid"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Bootstrap.uuid"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bootstrap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Bootstrap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .config.Server server = 1 [json_name = "server"];
  if (this->_internal_has_server()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::server(this),
        _Internal::server(this).GetCachedSize(), target, stream);
  }

  // .config.Local local = 2 [json_name = "local"];
  if (this->_internal_has_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::local(this),
        _Internal::local(this).GetCachedSize(), target, stream);
  }

  // .config.Serial serial = 3 [json_name = "serial"];
  if (this->_internal_has_serial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::serial(this),
        _Internal::serial(this).GetCachedSize(), target, stream);
  }

  // string uuid = 4 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Bootstrap.uuid");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uuid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Bootstrap)
  return target;
}

size_t Bootstrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Bootstrap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 4 [json_name = "uuid"];
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .config.Server server = 1 [json_name = "server"];
  if (this->_internal_has_server()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_);
  }

  // .config.Local local = 2 [json_name = "local"];
  if (this->_internal_has_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.local_);
  }

  // .config.Serial serial = 3 [json_name = "serial"];
  if (this->_internal_has_serial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.serial_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bootstrap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bootstrap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bootstrap::GetClassData() const { return &_class_data_; }


void Bootstrap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bootstrap*>(&to_msg);
  auto& from = static_cast<const Bootstrap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Bootstrap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (from._internal_has_server()) {
    _this->_internal_mutable_server()->::config::Server::MergeFrom(
        from._internal_server());
  }
  if (from._internal_has_local()) {
    _this->_internal_mutable_local()->::config::Local::MergeFrom(
        from._internal_local());
  }
  if (from._internal_has_serial()) {
    _this->_internal_mutable_serial()->::config::Serial::MergeFrom(
        from._internal_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bootstrap::CopyFrom(const Bootstrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Bootstrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bootstrap::IsInitialized() const {
  return true;
}

void Bootstrap::InternalSwap(Bootstrap* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.serial_)
      + sizeof(Bootstrap::_impl_.serial_)
      - PROTOBUF_FIELD_OFFSET(Bootstrap, _impl_.server_)>(
          reinterpret_cast<char*>(&_impl_.server_),
          reinterpret_cast<char*>(&other->_impl_.server_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bootstrap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[0]);
}

// ===================================================================

class Server_GRPC::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& timeout(const Server_GRPC* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Server_GRPC::_Internal::timeout(const Server_GRPC* msg) {
  return *msg->_impl_.timeout_;
}
void Server_GRPC::clear_timeout() {
  if (GetArenaForAllocation() == nullptr && _impl_.timeout_ != nullptr) {
    delete _impl_.timeout_;
  }
  _impl_.timeout_ = nullptr;
}
Server_GRPC::Server_GRPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Server.GRPC)
}
Server_GRPC::Server_GRPC(const Server_GRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Server_GRPC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.network_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.timeout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timeout()) {
    _this->_impl_.timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.timeout_);
  }
  // @@protoc_insertion_point(copy_constructor:config.Server.GRPC)
}

inline void Server_GRPC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.network_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.timeout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Server_GRPC::~Server_GRPC() {
  // @@protoc_insertion_point(destructor:config.Server.GRPC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Server_GRPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.network_.Destroy();
  _impl_.addr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timeout_;
}

void Server_GRPC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Server_GRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Server.GRPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timeout_ != nullptr) {
    delete _impl_.timeout_;
  }
  _impl_.timeout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server_GRPC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string network = 1 [json_name = "network"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Server.GRPC.network"));
        } else
          goto handle_unusual;
        continue;
      // string addr = 2 [json_name = "addr"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Server.GRPC.addr"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Server_GRPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Server.GRPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string network = 1 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Server.GRPC.network");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network(), target);
  }

  // string addr = 2 [json_name = "addr"];
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Server.GRPC.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  if (this->_internal_has_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timeout(this),
        _Internal::timeout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Server.GRPC)
  return target;
}

size_t Server_GRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Server.GRPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network = 1 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string addr = 2 [json_name = "addr"];
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  if (this->_internal_has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Server_GRPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Server_GRPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Server_GRPC::GetClassData() const { return &_class_data_; }


void Server_GRPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Server_GRPC*>(&to_msg);
  auto& from = static_cast<const Server_GRPC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Server.GRPC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_has_timeout()) {
    _this->_internal_mutable_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Server_GRPC::CopyFrom(const Server_GRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Server.GRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server_GRPC::IsInitialized() const {
  return true;
}

void Server_GRPC::InternalSwap(Server_GRPC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.timeout_, other->_impl_.timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Server_GRPC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[1]);
}

// ===================================================================

class Server::_Internal {
 public:
  static const ::config::Server_GRPC& grpc(const Server* msg);
};

const ::config::Server_GRPC&
Server::_Internal::grpc(const Server* msg) {
  return *msg->_impl_.grpc_;
}
Server::Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Server)
}
Server::Server(const Server& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Server* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grpc()) {
    _this->_impl_.grpc_ = new ::config::Server_GRPC(*from._impl_.grpc_);
  }
  // @@protoc_insertion_point(copy_constructor:config.Server)
}

inline void Server::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:config.Server)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Server::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.grpc_;
}

void Server::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Server)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.grpc_ != nullptr) {
    delete _impl_.grpc_;
  }
  _impl_.grpc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Server::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .config.Server.GRPC grpc = 1 [json_name = "grpc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grpc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Server::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Server)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .config.Server.GRPC grpc = 1 [json_name = "grpc"];
  if (this->_internal_has_grpc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grpc(this),
        _Internal::grpc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Server)
  return target;
}

size_t Server::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Server)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .config.Server.GRPC grpc = 1 [json_name = "grpc"];
  if (this->_internal_has_grpc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grpc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Server::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Server::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Server::GetClassData() const { return &_class_data_; }


void Server::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Server*>(&to_msg);
  auto& from = static_cast<const Server&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Server)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_grpc()) {
    _this->_internal_mutable_grpc()->::config::Server_GRPC::MergeFrom(
        from._internal_grpc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {
  return true;
}

void Server::InternalSwap(Server* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpc_, other->_impl_.grpc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Server::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[2]);
}

// ===================================================================

class Local_GRPC::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& timeout(const Local_GRPC* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Local_GRPC::_Internal::timeout(const Local_GRPC* msg) {
  return *msg->_impl_.timeout_;
}
void Local_GRPC::clear_timeout() {
  if (GetArenaForAllocation() == nullptr && _impl_.timeout_ != nullptr) {
    delete _impl_.timeout_;
  }
  _impl_.timeout_ = nullptr;
}
Local_GRPC::Local_GRPC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Local.GRPC)
}
Local_GRPC::Local_GRPC(const Local_GRPC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Local_GRPC* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.network_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.timeout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_network().empty()) {
    _this->_impl_.network_.Set(from._internal_network(), 
      _this->GetArenaForAllocation());
  }
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    _this->_impl_.addr_.Set(from._internal_addr(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_timeout()) {
    _this->_impl_.timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.timeout_);
  }
  // @@protoc_insertion_point(copy_constructor:config.Local.GRPC)
}

inline void Local_GRPC::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.network_){}
    , decltype(_impl_.addr_){}
    , decltype(_impl_.timeout_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.network_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.network_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.addr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.addr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Local_GRPC::~Local_GRPC() {
  // @@protoc_insertion_point(destructor:config.Local.GRPC)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Local_GRPC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.network_.Destroy();
  _impl_.addr_.Destroy();
  if (this != internal_default_instance()) delete _impl_.timeout_;
}

void Local_GRPC::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Local_GRPC::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Local.GRPC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.network_.ClearToEmpty();
  _impl_.addr_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.timeout_ != nullptr) {
    delete _impl_.timeout_;
  }
  _impl_.timeout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Local_GRPC::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string network = 1 [json_name = "network"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_network();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Local.GRPC.network"));
        } else
          goto handle_unusual;
        continue;
      // string addr = 2 [json_name = "addr"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Local.GRPC.addr"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Local_GRPC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Local.GRPC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string network = 1 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Local.GRPC.network");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network(), target);
  }

  // string addr = 2 [json_name = "addr"];
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Local.GRPC.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  if (this->_internal_has_timeout()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timeout(this),
        _Internal::timeout(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Local.GRPC)
  return target;
}

size_t Local_GRPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Local.GRPC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network = 1 [json_name = "network"];
  if (!this->_internal_network().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string addr = 2 [json_name = "addr"];
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // .google.protobuf.Duration timeout = 3 [json_name = "timeout"];
  if (this->_internal_has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Local_GRPC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Local_GRPC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Local_GRPC::GetClassData() const { return &_class_data_; }


void Local_GRPC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Local_GRPC*>(&to_msg);
  auto& from = static_cast<const Local_GRPC&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Local.GRPC)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_network().empty()) {
    _this->_internal_set_network(from._internal_network());
  }
  if (!from._internal_addr().empty()) {
    _this->_internal_set_addr(from._internal_addr());
  }
  if (from._internal_has_timeout()) {
    _this->_internal_mutable_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_timeout());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Local_GRPC::CopyFrom(const Local_GRPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Local.GRPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Local_GRPC::IsInitialized() const {
  return true;
}

void Local_GRPC::InternalSwap(Local_GRPC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.network_, lhs_arena,
      &other->_impl_.network_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.addr_, lhs_arena,
      &other->_impl_.addr_, rhs_arena
  );
  swap(_impl_.timeout_, other->_impl_.timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Local_GRPC::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[3]);
}

// ===================================================================

class Local::_Internal {
 public:
  static const ::config::Local_GRPC& grpc(const Local* msg);
};

const ::config::Local_GRPC&
Local::_Internal::grpc(const Local* msg) {
  return *msg->_impl_.grpc_;
}
Local::Local(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Local)
}
Local::Local(const Local& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Local* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grpc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grpc()) {
    _this->_impl_.grpc_ = new ::config::Local_GRPC(*from._impl_.grpc_);
  }
  // @@protoc_insertion_point(copy_constructor:config.Local)
}

inline void Local::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grpc_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Local::~Local() {
  // @@protoc_insertion_point(destructor:config.Local)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Local::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.grpc_;
}

void Local::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Local::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Local)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.grpc_ != nullptr) {
    delete _impl_.grpc_;
  }
  _impl_.grpc_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Local::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .config.Local.GRPC grpc = 1 [json_name = "grpc"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grpc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Local::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Local)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .config.Local.GRPC grpc = 1 [json_name = "grpc"];
  if (this->_internal_has_grpc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::grpc(this),
        _Internal::grpc(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Local)
  return target;
}

size_t Local::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Local)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .config.Local.GRPC grpc = 1 [json_name = "grpc"];
  if (this->_internal_has_grpc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grpc_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Local::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Local::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Local::GetClassData() const { return &_class_data_; }


void Local::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Local*>(&to_msg);
  auto& from = static_cast<const Local&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Local)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_grpc()) {
    _this->_internal_mutable_grpc()->::config::Local_GRPC::MergeFrom(
        from._internal_grpc());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Local::CopyFrom(const Local& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Local)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Local::IsInitialized() const {
  return true;
}

void Local::InternalSwap(Local* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.grpc_, other->_impl_.grpc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Local::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[4]);
}

// ===================================================================

class Serial::_Internal {
 public:
};

Serial::Serial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.Serial)
}
Serial::Serial(const Serial& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Serial* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_port_){}
    , decltype(_impl_.baud_rate_){}
    , decltype(_impl_.data_bits_){}
    , decltype(_impl_.stop_bits_){}
    , decltype(_impl_.parity_){}
    , decltype(_impl_.flow_control_){}
    , decltype(_impl_.clocal_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serial_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_port().empty()) {
    _this->_impl_.serial_port_.Set(from._internal_serial_port(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.baud_rate_, &from._impl_.baud_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clocal_) -
    reinterpret_cast<char*>(&_impl_.baud_rate_)) + sizeof(_impl_.clocal_));
  // @@protoc_insertion_point(copy_constructor:config.Serial)
}

inline void Serial::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.serial_port_){}
    , decltype(_impl_.baud_rate_){0}
    , decltype(_impl_.data_bits_){0}
    , decltype(_impl_.stop_bits_){0}
    , decltype(_impl_.parity_){0}
    , decltype(_impl_.flow_control_){false}
    , decltype(_impl_.clocal_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serial_port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Serial::~Serial() {
  // @@protoc_insertion_point(destructor:config.Serial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Serial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.serial_port_.Destroy();
}

void Serial::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Serial::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Serial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.serial_port_.ClearToEmpty();
  ::memset(&_impl_.baud_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clocal_) -
      reinterpret_cast<char*>(&_impl_.baud_rate_)) + sizeof(_impl_.clocal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Serial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string serial_port = 1 [json_name = "serialPort"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serial_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "config.Serial.serial_port"));
        } else
          goto handle_unusual;
        continue;
      // int32 baud_rate = 2 [json_name = "baudRate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.baud_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_bits = 3 [json_name = "dataBits"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.data_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_bits = 4 [json_name = "stopBits"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stop_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 parity = 5 [json_name = "parity"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.parity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool flow_control = 6 [json_name = "flowControl"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.flow_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool clocal = 7 [json_name = "clocal"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.clocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Serial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.Serial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string serial_port = 1 [json_name = "serialPort"];
  if (!this->_internal_serial_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_port().data(), static_cast<int>(this->_internal_serial_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "config.Serial.serial_port");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serial_port(), target);
  }

  // int32 baud_rate = 2 [json_name = "baudRate"];
  if (this->_internal_baud_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_baud_rate(), target);
  }

  // int32 data_bits = 3 [json_name = "dataBits"];
  if (this->_internal_data_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_data_bits(), target);
  }

  // int32 stop_bits = 4 [json_name = "stopBits"];
  if (this->_internal_stop_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stop_bits(), target);
  }

  // int32 parity = 5 [json_name = "parity"];
  if (this->_internal_parity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_parity(), target);
  }

  // bool flow_control = 6 [json_name = "flowControl"];
  if (this->_internal_flow_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_flow_control(), target);
  }

  // bool clocal = 7 [json_name = "clocal"];
  if (this->_internal_clocal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_clocal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Serial)
  return target;
}

size_t Serial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Serial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serial_port = 1 [json_name = "serialPort"];
  if (!this->_internal_serial_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_port());
  }

  // int32 baud_rate = 2 [json_name = "baudRate"];
  if (this->_internal_baud_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_baud_rate());
  }

  // int32 data_bits = 3 [json_name = "dataBits"];
  if (this->_internal_data_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_bits());
  }

  // int32 stop_bits = 4 [json_name = "stopBits"];
  if (this->_internal_stop_bits() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_bits());
  }

  // int32 parity = 5 [json_name = "parity"];
  if (this->_internal_parity() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parity());
  }

  // bool flow_control = 6 [json_name = "flowControl"];
  if (this->_internal_flow_control() != 0) {
    total_size += 1 + 1;
  }

  // bool clocal = 7 [json_name = "clocal"];
  if (this->_internal_clocal() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Serial::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Serial::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Serial::GetClassData() const { return &_class_data_; }


void Serial::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Serial*>(&to_msg);
  auto& from = static_cast<const Serial&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.Serial)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_serial_port().empty()) {
    _this->_internal_set_serial_port(from._internal_serial_port());
  }
  if (from._internal_baud_rate() != 0) {
    _this->_internal_set_baud_rate(from._internal_baud_rate());
  }
  if (from._internal_data_bits() != 0) {
    _this->_internal_set_data_bits(from._internal_data_bits());
  }
  if (from._internal_stop_bits() != 0) {
    _this->_internal_set_stop_bits(from._internal_stop_bits());
  }
  if (from._internal_parity() != 0) {
    _this->_internal_set_parity(from._internal_parity());
  }
  if (from._internal_flow_control() != 0) {
    _this->_internal_set_flow_control(from._internal_flow_control());
  }
  if (from._internal_clocal() != 0) {
    _this->_internal_set_clocal(from._internal_clocal());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Serial::CopyFrom(const Serial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Serial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serial::IsInitialized() const {
  return true;
}

void Serial::InternalSwap(Serial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_port_, lhs_arena,
      &other->_impl_.serial_port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Serial, _impl_.clocal_)
      + sizeof(Serial::_impl_.clocal_)
      - PROTOBUF_FIELD_OFFSET(Serial, _impl_.baud_rate_)>(
          reinterpret_cast<char*>(&_impl_.baud_rate_),
          reinterpret_cast<char*>(&other->_impl_.baud_rate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Serial::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[5]);
}

// ===================================================================

class PlatInfo_InternalArray::_Internal {
 public:
};

PlatInfo_InternalArray::PlatInfo_InternalArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.PlatInfo.InternalArray)
}
PlatInfo_InternalArray::PlatInfo_InternalArray(const PlatInfo_InternalArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlatInfo_InternalArray* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:config.PlatInfo.InternalArray)
}

inline void PlatInfo_InternalArray::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.index_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlatInfo_InternalArray::~PlatInfo_InternalArray() {
  // @@protoc_insertion_point(destructor:config.PlatInfo.InternalArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatInfo_InternalArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedField();
}

void PlatInfo_InternalArray::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlatInfo_InternalArray::Clear() {
// @@protoc_insertion_point(message_clear_start:config.PlatInfo.InternalArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.index_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatInfo_InternalArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double items = 2 [json_name = "items"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_items(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_items(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatInfo_InternalArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.PlatInfo.InternalArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_index(), target);
  }

  // repeated double items = 2 [json_name = "items"];
  if (this->_internal_items_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_items(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.PlatInfo.InternalArray)
  return target;
}

size_t PlatInfo_InternalArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.PlatInfo.InternalArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double items = 2 [json_name = "items"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_items_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // int64 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatInfo_InternalArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlatInfo_InternalArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatInfo_InternalArray::GetClassData() const { return &_class_data_; }


void PlatInfo_InternalArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlatInfo_InternalArray*>(&to_msg);
  auto& from = static_cast<const PlatInfo_InternalArray&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.PlatInfo.InternalArray)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatInfo_InternalArray::CopyFrom(const PlatInfo_InternalArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.PlatInfo.InternalArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatInfo_InternalArray::IsInitialized() const {
  return true;
}

void PlatInfo_InternalArray::InternalSwap(PlatInfo_InternalArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatInfo_InternalArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[6]);
}

// ===================================================================

class PlatInfo::_Internal {
 public:
};

PlatInfo::PlatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:config.PlatInfo)
}
PlatInfo::PlatInfo(const PlatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlatInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ancher_){from._impl_.ancher_}
    , decltype(_impl_.plate_){from._impl_.plate_}
    , decltype(_impl_.ltmp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ltmp_ = from._impl_.ltmp_;
  // @@protoc_insertion_point(copy_constructor:config.PlatInfo)
}

inline void PlatInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ancher_){arena}
    , decltype(_impl_.plate_){arena}
    , decltype(_impl_.ltmp_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlatInfo::~PlatInfo() {
  // @@protoc_insertion_point(destructor:config.PlatInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ancher_.~RepeatedPtrField();
  _impl_.plate_.~RepeatedPtrField();
}

void PlatInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:config.PlatInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ancher_.Clear();
  _impl_.plate_.Clear();
  _impl_.ltmp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ltmp = 1 [json_name = "ltmp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ltmp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .config.PlatInfo.InternalArray ancher = 2 [json_name = "ancher"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ancher(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .config.PlatInfo.InternalArray plate = 3 [json_name = "plate"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:config.PlatInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ltmp = 1 [json_name = "ltmp"];
  if (this->_internal_ltmp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ltmp(), target);
  }

  // repeated .config.PlatInfo.InternalArray ancher = 2 [json_name = "ancher"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ancher_size()); i < n; i++) {
    const auto& repfield = this->_internal_ancher(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .config.PlatInfo.InternalArray plate = 3 [json_name = "plate"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_plate_size()); i < n; i++) {
    const auto& repfield = this->_internal_plate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.PlatInfo)
  return target;
}

size_t PlatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.PlatInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .config.PlatInfo.InternalArray ancher = 2 [json_name = "ancher"];
  total_size += 1UL * this->_internal_ancher_size();
  for (const auto& msg : this->_impl_.ancher_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .config.PlatInfo.InternalArray plate = 3 [json_name = "plate"];
  total_size += 1UL * this->_internal_plate_size();
  for (const auto& msg : this->_impl_.plate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 ltmp = 1 [json_name = "ltmp"];
  if (this->_internal_ltmp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ltmp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlatInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatInfo::GetClassData() const { return &_class_data_; }


void PlatInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlatInfo*>(&to_msg);
  auto& from = static_cast<const PlatInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:config.PlatInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ancher_.MergeFrom(from._impl_.ancher_);
  _this->_impl_.plate_.MergeFrom(from._impl_.plate_);
  if (from._internal_ltmp() != 0) {
    _this->_internal_set_ltmp(from._internal_ltmp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatInfo::CopyFrom(const PlatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.PlatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatInfo::IsInitialized() const {
  return true;
}

void PlatInfo::InternalSwap(PlatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ancher_.InternalSwap(&other->_impl_.ancher_);
  _impl_.plate_.InternalSwap(&other->_impl_.plate_);
  swap(_impl_.ltmp_, other->_impl_.ltmp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_src_2fconf_2fconf_2eproto_getter, &descriptor_table_src_2fconf_2fconf_2eproto_once,
      file_level_metadata_src_2fconf_2fconf_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::config::Bootstrap*
Arena::CreateMaybeMessage< ::config::Bootstrap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Bootstrap >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Server_GRPC*
Arena::CreateMaybeMessage< ::config::Server_GRPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Server_GRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Server*
Arena::CreateMaybeMessage< ::config::Server >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Server >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Local_GRPC*
Arena::CreateMaybeMessage< ::config::Local_GRPC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Local_GRPC >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Local*
Arena::CreateMaybeMessage< ::config::Local >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Local >(arena);
}
template<> PROTOBUF_NOINLINE ::config::Serial*
Arena::CreateMaybeMessage< ::config::Serial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::Serial >(arena);
}
template<> PROTOBUF_NOINLINE ::config::PlatInfo_InternalArray*
Arena::CreateMaybeMessage< ::config::PlatInfo_InternalArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::PlatInfo_InternalArray >(arena);
}
template<> PROTOBUF_NOINLINE ::config::PlatInfo*
Arena::CreateMaybeMessage< ::config::PlatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::config::PlatInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
